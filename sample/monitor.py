import psutil
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
import subprocess

# Initialize lists to store data
time = []
cpu_usage = []
memory_usage = []
sent = []
received = []


# Function to update CPU, memory, and network data
def update_data(frame):
    current_time = psutil.cpu_times().user
    cpu_percent = psutil.cpu_percent()
    memory_percent = psutil.virtual_memory().percent

    net_io = psutil.net_io_counters()
    bytes_sent = net_io.bytes_sent
    bytes_recv = net_io.bytes_recv

    time.append(current_time)
    cpu_usage.append(cpu_percent)
    memory_usage.append(memory_percent)
    sent.append(bytes_sent)
    received.append(bytes_recv)

    if len(time) > 1:
        # Calculate the difference in bytes sent and received since the last measurement
        sent_diff = sent[-1] - sent[-2]
        received_diff = received[-1] - received[-2]

        # Append the difference to the lists
        sent.pop(-1)
        received.pop(-1)
        sent.append(sent_diff)
        received.append(received_diff)

    if len(time) > 50:
        time.pop(0)
        cpu_usage.pop(0)
        memory_usage.pop(0)
        sent.pop(0)
        received.pop(0)

    plt.subplot(3, 2, 1)
    plt.cla()
    plt.fill_between(range(len(cpu_usage)), cpu_usage, alpha=0.5, color='blue', label='CPU Usage (%)')
    plt.xlabel('Time')
    plt.ylabel('CPU Usage (%)')
    plt.title('Real-Time CPU Usage')
    plt.legend()
    plt.tight_layout()

    plt.subplot(3, 2, 3)
    plt.cla()
    plt.fill_between(range(len(memory_usage)), memory_usage, alpha=0.5, color='green', label='Memory Usage (%)')
    plt.xlabel('Time')
    plt.ylabel('Memory Usage (%)')
    plt.title('Real-Time Memory Usage')
    plt.legend()
    plt.tight_layout()

    plt.subplot(3, 2, 5)
    plt.cla()
    plt.fill_between(range(len(sent)), sent, alpha=0.5, color='orange', label='Sent (Bytes)')
    plt.fill_between(range(len(received)), received, alpha=0.5, color='red', label='Received (Bytes)')
    plt.xlabel('Time')
    plt.ylabel('Bytes')
    plt.title('Real-Time Network Usage')
    plt.legend()
    plt.tight_layout()

    # Display the output of htop command
    plt.subplot(1, 2, 2)
    plt.cla()
    plt.text(0.1, 0.9, 'ZERODAY DEFENDERS', fontsize=16, ha='left')
    try:
        htop_output = subprocess.run(['htop', '-C'], capture_output=True, text=True, timeout=10, check=True)
        plt.text(0.1, 0.5, htop_output.stdout, fontsize=8, ha='left', va='top')
    except subprocess.CalledProcessError as e:
        plt.text(0.1, 0.5, f'Error: {e}', fontsize=8, ha='left', va='top')
    except subprocess.TimeoutExpired:
        plt.text(0.1, 0.5, 'Error: Timeout occurred', fontsize=8, ha='left', va='top')
    except FileNotFoundError:
        plt.text(0.1, 0.5, 'Error: htop command not found', fontsize=8, ha='left', va='top')
    plt.axis('off')
    plt.tight_layout()


# Create animation
ani = FuncAnimation(plt.gcf(), update_data, interval=1000)  # Update data every 1 second

# Show the plots
plt.show()