import os
import requests
import time


class VirusTotalChecker:
    def __init__(self, api_key, max_size_kb=2048):
        self.api_key = api_key
        self.max_size_kb = max_size_kb
        self.all_files = {}  # Dictionary to store information about all files

    def list_and_check_files(self, directory):
        try:
            with os.scandir(directory) as entries:
                for entry in entries:
                    if entry.is_file() and entry.stat().st_size < self.max_size_kb * 1024:
                        file_path = os.path.join(directory, entry.name)
                        print(f"Checking file: {entry.name}")
                        self.check_file_virustotal(file_path)
        except FileNotFoundError:
            print(f"Error: Directory '{directory}' not found.")
        except Exception as e:
            print(f"An error occurred: {e}")

    def check_file_virustotal(self, file_path):
        url = 'https://www.virustotal.com/vtapi/v2/file/scan'
        params = {'apikey': self.api_key}

        with open(file_path, 'rb') as file:
            files = {'file': (file_path, file)}
            response = requests.post(url, files=files, params=params)

        if response.status_code == 200:
            json_response = response.json()
            resource = json_response.get('resource')
            if resource:
                self.check_file_status(resource, file_path)
            else:
                print("Error: Unable to get resource from VirusTotal response.")
        else:
            print(f"Error: {response.status_code}, {response.text}")

    def check_file_status(self, resource, file_path):
        url = 'https://www.virustotal.com/vtapi/v2/file/report'
        params = {'apikey': self.api_key, 'resource': resource}

        # Retry fetching the report up to 5 times with a delay of 3 seconds between retries
        for attempt in range(5):
            response = requests.get(url, params=params)
            time.sleep(6)

            if response.status_code == 200:
                json_response = response.json()
                positives = json_response.get('positives', 0)
                total = json_response.get('total', 0)
                if positives > 0:
                    print(f"The file is malicious! Detection rate: {positives}/{total}")
                    self.all_files[file_path] = (
                    f"{positives}/{total}", "Malicious")  # Store malicious file info in the dictionary
                else:
                    print("The file is not detected as malicious.")
                    self.all_files[file_path] = (
                    f"{positives}/{total}", "Safe")
                    # Store non-malicious file info in the dictionary
                break  # Break out of the retry loop if successful
            elif response.status_code == 204:
                print(f"Report not ready. Retrying in 3 seconds (attempt {attempt + 1}/5)...")

            else:
                print(f"Error: {response.status_code}, {response.text}")
                break  # Break out of the retry loop if an error occurs


if __name__ == "__main__":
    api_key = '3b2e67947098b902210663998774860db84234f6acc3c18a2f3117c939e29219'  # Replace 'YOUR_API_KEY' with your actual VirusTotal API key
    directory_path = 'C:/Users/ajay dattu/PycharmProjects/pythonProject/Ui'  # Replace '/path/to/your/directory' with the actual path to the directory you want to check
    max_size_kb = 2048  # Set the maximum file size in kilobytes (default is 2048 KB, or 2 MB)

    vt_checker = VirusTotalChecker(api_key, max_size_kb)
    vt_checker.list_and_check_files(directory_path)

    # Print the information about all files
    # Print the information about all files
    print("All Files:")
    for file_path, (detection_rate, status) in vt_checker.all_files.items():
        if "Malicious" in status:
            print(f"Malicious item detected in file: {file_path}. Status: {status}")
        else:
            print(f"Safe file: {file_path}. Status: {status}")
        print(f"Detection rate: {detection_rate}")
